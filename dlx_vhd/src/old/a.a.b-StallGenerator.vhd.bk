--------------------------------------------------------------------------------
-- FILE: StallGenerator
-- DESC: Generate stall for each stage
--
-- Author:
-- Create: 2015-06-02
-- Update: 2015-06-02
-- Status: UNTESTED
--------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use work.Consts.all;

--------------------------------------------------------------------------------
-- ENTITY
--------------------------------------------------------------------------------
entity StallGenerator is
	generic(
		CWRD_SIZE : integer := C_SYS_CWRD_SIZE
	);
	port(
		rst				: in std_logic;
		clk				: in std_logic;
		s2_branch_taken	: in std_logic := '0';
		s2_branch_wait	: in std_logic := '0';
		s3_reg_a_wait	: in std_logic := '0';
		s3_reg_b_wait	: in std_logic := '0';
		stall1			: out std_logic := '1';
		stall2			: out std_logic := '1';
		stall3			: out std_logic := '1';
		stall4			: out std_logic := '1';
		stall5			: out std_logic := '1'
	);
end StallGenerator;

--------------------------------------------------------------------------------
-- ARCHITECTURE
--------------------------------------------------------------------------------
architecture stall_generator_arch of StallGenerator is
--	signal s1 : std_logic:='0';
--	signal s2 : std_logic:='0';
--	signal s3 : std_logic:='1';
--	signal s4 : std_logic:='1';
--	signal s5 : std_logic:='1';
--	signal l1 : std_logic:='0';
--	signal l2 : std_logic:='0';
--	signal l3 : std_logic:='0';
--	signal l4 : std_logic:='0';
--	signal l5 : std_logic:='0';
--	signal l1_d : std_logic:='0';
--	signal l2_d : std_logic:='0';
--	signal l3_d : std_logic:='0';
--	signal l4_d : std_logic:='0';
--	signal l5_d : std_logic:='0';
begin
--	l1 <= s2_branch_taken or s2_branch_wait or s3_reg_a_wait or s3_reg_b_wait;
--	l2 <= s2_branch_wait or s3_reg_a_wait or s3_reg_b_wait;
--	l3 <= s3_reg_a_wait or s3_reg_b_wait;
--	P_SH: process(rst, clk)
--	begin
--		if rst='0' then
--			s1<='0';
--			s2<='1';
--			s3<='1';
--			s4<='1';
--			s5<='1';
--		else
--			l1_d <= l1;
--			l2_d <= l2;
--			l3_d <= l3;
--			l4_d <= l4;
--			l5_d <= l5;
--			if clk'event and clk='1' then
--				s1 <= '0';
--				if (l1_d and (not l2_d))='1' then
--					s2 <= '1';
--				else
--					s2 <= s1;
--				end if;
--				if (l2_d and (not l3_d))='1' then
--					s3 <= '1';
--				else
--					s3 <= s2;
--				end if;
--				if (l3_d and (not l4_d))='1' then
--					s4 <= '1';
--				else
--					s4 <= s3;
--				end if;
--				if (l4_d and (not l5_d))='1' then
--					s5 <= '1';
--				else
--					s5 <= s4;
--				end if;
--			end if;
--		end if;
--	end process;
	
--	stall1 <= s1 and l1_d;
--	stall2 <= s2 or l2_d;
--	stall3 <= s3 or l3_d;
--	stall4 <= s4 or l4_d;
--	stall5 <= s5 or l5_d;


	P_0:process(clk)
		variable s_br : std_logic_vector(4 downto 0):"00000";
	begin
		if clk'event and clk='1' then
			if 
		
end stall_generator_arch;
